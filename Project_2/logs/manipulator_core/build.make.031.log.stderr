[01m[K/home/yasin/EE451/Project_2/src/manipulator_core/src/robot_model.cpp:[m[K In function â€˜[01m[Kint main(int, char**)[m[Kâ€™:
[01m[K/home/yasin/EE451/Project_2/src/manipulator_core/src/robot_model.cpp:133:71:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Kconst Isometry3d {aka const Eigen::Transform<double, 3, 1>}[m[Kâ€™ and â€˜[01m[Kconst Isometry3d {aka const Eigen::Transform<double, 3, 1>}[m[Kâ€™)
   end_effector_state = kinematic_state->getGlobalLinkTransform("link4"[01;31m[K)[m[K;
                                                                       [01;31m[K^[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Geometry:44:0[m[K,
                 from [01m[K/opt/ros/melodic/include/moveit/robot_model/joint_model.h:47[m[K,
                 from [01m[K/opt/ros/melodic/include/moveit/robot_model/joint_model_group.h:41[m[K,
                 from [01m[K/opt/ros/melodic/include/moveit/robot_model/robot_model.h:47[m[K,
                 from [01m[K/opt/ros/melodic/include/moveit/robot_model_loader/robot_model_loader.h:41[m[K,
                 from [01m[K/home/yasin/EE451/Project_2/src/manipulator_core/src/robot_model.cpp:11[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Geometry/Transform.h:285:39:[m[K [01;36m[Knote: [m[Kcandidate: Eigen::Transform<Scalar, Dim, Mode, _Options>& Eigen::Transform<Scalar, Dim, Mode, _Options>::operator=(const Eigen::Transform<Scalar, Dim, Mode, _Options>&) [with _Scalar = double; int _Dim = 3; int _Mode = 1; int _Options = 0] <near match>
   EIGEN_DEVICE_FUNC inline Transform& [01;36m[Koperator[m[K=(const Transform& other)
                                       [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Geometry/Transform.h:285:39:[m[K [01;36m[Knote: [m[K  passing â€˜[01m[Kconst Isometry3d* {aka const Eigen::Transform<double, 3, 1>*}[m[Kâ€™ as â€˜[01m[Kthis[m[Kâ€™ argument discards qualifiers
[01m[K/usr/include/eigen3/Eigen/src/Geometry/Transform.h:303:39:[m[K [01;36m[Knote: [m[Kcandidate: template<class OtherDerived> Eigen::Transform<Scalar, Dim, Mode, _Options>& Eigen::Transform<Scalar, Dim, Mode, _Options>::operator=(const Eigen::EigenBase<OtherDerived>&) [with OtherDerived = OtherDerived; _Scalar = double; int _Dim = 3; int _Mode = 1; int _Options = 0]
   EIGEN_DEVICE_FUNC inline Transform& [01;36m[Koperator[m[K=(const EigenBase<OtherDerived>& other)
                                       [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Geometry/Transform.h:303:39:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/yasin/EE451/Project_2/src/manipulator_core/src/robot_model.cpp:133:71:[m[K [01;36m[Knote: [m[K  â€˜[01m[Kconst Isometry3d {aka const Eigen::Transform<double, 3, 1>}[m[Kâ€™ is not derived from â€˜[01m[Kconst Eigen::EigenBase<Derived>[m[Kâ€™
   end_effector_state = kinematic_state->getGlobalLinkTransform("link4"[01;36m[K)[m[K;
                                                                       [01;36m[K^[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Geometry:44:0[m[K,
                 from [01m[K/opt/ros/melodic/include/moveit/robot_model/joint_model.h:47[m[K,
                 from [01m[K/opt/ros/melodic/include/moveit/robot_model/joint_model_group.h:41[m[K,
                 from [01m[K/opt/ros/melodic/include/moveit/robot_model/robot_model.h:47[m[K,
                 from [01m[K/opt/ros/melodic/include/moveit/robot_model_loader/robot_model_loader.h:41[m[K,
                 from [01m[K/home/yasin/EE451/Project_2/src/manipulator_core/src/robot_model.cpp:11[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Geometry/Transform.h:369:32:[m[K [01;36m[Knote: [m[Kcandidate: template<class OtherDerived> Eigen::Transform<Scalar, Dim, Mode, _Options>& Eigen::Transform<Scalar, Dim, Mode, _Options>::operator=(const Eigen::ReturnByValue<OtherDerived>&) [with OtherDerived = OtherDerived; _Scalar = double; int _Dim = 3; int _Mode = 1; int _Options = 0]
   EIGEN_DEVICE_FUNC Transform& [01;36m[Koperator[m[K=(const ReturnByValue<OtherDerived>& other)
                                [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Geometry/Transform.h:369:32:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/yasin/EE451/Project_2/src/manipulator_core/src/robot_model.cpp:133:71:[m[K [01;36m[Knote: [m[K  â€˜[01m[Kconst Isometry3d {aka const Eigen::Transform<double, 3, 1>}[m[Kâ€™ is not derived from â€˜[01m[Kconst Eigen::ReturnByValue<Derived>[m[Kâ€™
   end_effector_state = kinematic_state->getGlobalLinkTransform("link4"[01;36m[K)[m[K;
                                                                       [01;36m[K^[m[K
In file included from [01m[K/usr/include/eigen3/Eigen/Geometry:44:0[m[K,
                 from [01m[K/opt/ros/melodic/include/moveit/robot_model/joint_model.h:47[m[K,
                 from [01m[K/opt/ros/melodic/include/moveit/robot_model/joint_model_group.h:41[m[K,
                 from [01m[K/opt/ros/melodic/include/moveit/robot_model/robot_model.h:47[m[K,
                 from [01m[K/opt/ros/melodic/include/moveit/robot_model_loader/robot_model_loader.h:41[m[K,
                 from [01m[K/home/yasin/EE451/Project_2/src/manipulator_core/src/robot_model.cpp:11[m[K:
[01m[K/usr/include/eigen3/Eigen/src/Geometry/Transform.h:1001:62:[m[K [01;36m[Knote: [m[Kcandidate: Eigen::Transform<Scalar, Dim, Mode, Options>& Eigen::Transform<Scalar, Dim, Mode, _Options>::operator=(const TranslationType&) [with _Scalar = double; int _Dim = 3; int _Mode = 1; int _Options = 0; Eigen::Transform<Scalar, Dim, Mode, _Options>::TranslationType = Eigen::Translation<double, 3>]
 EIGEN_DEVICE_FUNC inline Transform<Scalar,Dim,Mode,Options>& [01;36m[KTransform<Scalar,Dim,Mode,Options>[m[K::operator=(const TranslationType& t)
                                                              [01;36m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Geometry/Transform.h:1001:62:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kconst Isometry3d {aka const Eigen::Transform<double, 3, 1>}[m[Kâ€™ to â€˜[01m[Kconst TranslationType& {aka const Eigen::Translation<double, 3>&}[m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Geometry/Transform.h:1018:62:[m[K [01;36m[Knote: [m[Kcandidate: Eigen::Transform<Scalar, Dim, Mode, Options>& Eigen::Transform<Scalar, Dim, Mode, _Options>::operator=(const Eigen::UniformScaling<_Scalar>&) [with _Scalar = double; int _Dim = 3; int _Mode = 1; int _Options = 0]
 EIGEN_DEVICE_FUNC inline Transform<Scalar,Dim,Mode,Options>& [01;36m[KTransform<Scalar,Dim,Mode,Options>[m[K::operator=(const UniformScaling<Scalar>& s)
                                                              [01;36m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Geometry/Transform.h:1018:62:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kconst Isometry3d {aka const Eigen::Transform<double, 3, 1>}[m[Kâ€™ to â€˜[01m[Kconst Eigen::UniformScaling<double>&[m[Kâ€™
[01m[K/usr/include/eigen3/Eigen/src/Geometry/Transform.h:599:39:[m[K [01;36m[Knote: [m[Kcandidate: template<class Derived> Eigen::Transform<Scalar, Dim, Mode, Options>& Eigen::Transform<Scalar, Dim, Mode, _Options>::operator=(const Eigen::RotationBase<Derived, Dim>&) [with Derived = Derived; _Scalar = double; int _Dim = 3; int _Mode = 1; int _Options = 0]
   EIGEN_DEVICE_FUNC inline Transform& [01;36m[Koperator[m[K=(const RotationBase<Derived,Dim>& r);
                                       [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/eigen3/Eigen/src/Geometry/Transform.h:599:39:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/yasin/EE451/Project_2/src/manipulator_core/src/robot_model.cpp:133:71:[m[K [01;36m[Knote: [m[K  â€˜[01m[Kconst Isometry3d {aka const Eigen::Transform<double, 3, 1>}[m[Kâ€™ is not derived from â€˜[01m[Kconst Eigen::RotationBase<Derived, 3>[m[Kâ€™
   end_effector_state = kinematic_state->getGlobalLinkTransform("link4"[01;36m[K)[m[K;
                                                                       [01;36m[K^[m[K
make[2]: *** [CMakeFiles/robot_model_node.dir/src/robot_model.cpp.o] Error 1
make[1]: *** [CMakeFiles/robot_model_node.dir/all] Error 2
make: *** [all] Error 2
